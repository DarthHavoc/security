To create a Splunk search query to detect activity related to T1003.008 - OS Credential Dumping of /etc/passwd and /etc/shadow, you can use the following search query. This query will help you identify any execution of the `unshadow` utility on your Linux systems:

```spl
index=<your_index> sourcetype=<your_sourcetype> (command="/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db" OR cmdline="*unshadow*") NOT (user=root)
```

Here's an explanation of the components in this search query:

1. `index=<your_index>`: Replace `<your_index>` with the name of the index where your relevant log data is stored.

2. `sourcetype=<your_sourcetype>`: Replace `<your_sourcetype>` with the name of the sourcetype that corresponds to the log data you want to search. This helps narrow down the search to relevant log sources.

3. `(command="/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db" OR cmdline="*unshadow*")`: This part of the query looks for two conditions:
   - It searches for events where the `command` field matches the exact execution command of the `unshadow` utility, which is `/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db`.
   - It also searches for events where the `cmdline` field contains the word "unshadow." This covers cases where the utility might be invoked with different arguments or variations.

4. `NOT (user=root)`: This part of the query excludes events where the `user` field is set to "root" because, as per your description, `/etc/shadow` is only readable by the root user by default. If you expect legitimate root usage, you can adjust this part of the query to suit your specific environment.

Make sure to replace `<your_index>` and `<your_sourcetype>` with appropriate values for your Splunk setup. Additionally, adjust the query as needed to match the specifics of your environment and log sources.



Certainly, here's a detailed summary of the first search query, which is designed to identify the execution of the `unshadow` utility on Linux systems:

**Summary:**
This search query is crafted to detect instances of the `unshadow` utility being executed on Linux systems. The `unshadow` utility is commonly used to combine `/etc/passwd` and `/etc/shadow` files into a format suitable for password cracking tools. The query aims to identify this activity, which may indicate an attempt to retrieve password hashes for offline password cracking.

The search criteria include:

1. **Index and Sourcetype:** You need to specify the index and sourcetype to narrow down the search to relevant log data sources.

2. **Command Patterns:**
   - The query looks for events where the `command` field matches the exact execution command of the `unshadow` utility: `/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db`.
   - It also searches for events where the `cmdline` field contains the word "unshadow," covering potential variations in the command.

3. **Exclusion of Root User:**
   - To filter out legitimate use cases where the `unshadow` utility might be executed by the root user, the query includes `NOT (user=root)`.

By using this search query as part of your security monitoring setup, you can proactively detect any suspicious use of the `unshadow` utility, which could be an indicator of an attempt to compromise user account passwords on your Linux systems. When configured as an alert, it allows your security team to respond promptly to such activities and investigate them further.
__-------------



I understand that you want to detect the activity within the tests rather than just flagging the tests themselves. In this case, you can modify the Splunk search query to focus on the activity associated with each test. Here's a search query that detects the specific activities within the atomic tests:

```spl
index=<your_index> sourcetype=<your_sourcetype>
| search (command="sudo cat /etc/shadow > *") OR
  (command="cat /etc/passwd > *") OR
  (command="echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > *") OR
  (command="function testcat(){ echo \"$(< $1)\"; } testcat /etc/passwd > *|testcat /etc/shadow > *")
| table _time, user, host, command
```

This modified query specifically looks for the activities within each test scenario, such as the execution of commands like `sudo cat /etc/shadow`, `cat /etc/passwd`, `echo -e ... | ed`, and the `testcat` function calls. It then displays relevant fields like the timestamp (`_time`), user, host, and the executed command.

This approach will help you focus on detecting the activities associated with the tests rather than just identifying the tests themselves. Again, ensure that you adjust the index and sourcetype to match your environment, and test the query in a controlled environment before using it in a production setting.

Summary:
The search query is designed to identify potentially suspicious activities in log data. It focuses on detecting specific command patterns that could indicate unauthorized access or manipulation of sensitive system files on a Linux system. The search looks for the following activities:

    Accessing /etc/shadow:
        It looks for instances where the sudo cat /etc/shadow command is executed.
        This command is often associated with attempts to access the /etc/shadow file, which contains password hashes.

    Accessing /etc/passwd:
        It searches for events where the cat /etc/passwd command is executed.
        This command is commonly used to access the /etc/passwd file, which stores user account information.

    Unusual ed Command Usage:
        The search detects instances of the echo -e "e /etc/passwd\n,p\ne /etc/shadow\n,p\n" | ed > * command.
        This command suggests an unconventional use of the ed text editor to access both /etc/passwd and /etc/shadow, potentially for unauthorized purposes.

    Custom Shell Function (testcat):
        It identifies the presence of a custom shell function named testcat defined using function testcat(){ echo \"$(< $1)\"; }.
        The function is designed to read the content of a specified file (e.g., /etc/passwd or /etc/shadow) and redirect it to an unspecified target file.

By detecting these activities, the search query aims to highlight potential security concerns related to the unauthorized access or manipulation of critical system files. When configured as an alert, it can help security teams quickly respond to and investigate suspicious behavior on Linux systems.

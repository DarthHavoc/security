To create a Splunk search query to detect activity related to T1003.008 - OS Credential Dumping of /etc/passwd and /etc/shadow, you can use the following search query. This query will help you identify any execution of the `unshadow` utility on your Linux systems:

```spl
index=<your_index> sourcetype=<your_sourcetype> (command="/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db" OR cmdline="*unshadow*") NOT (user=root)
```

Here's an explanation of the components in this search query:

1. `index=<your_index>`: Replace `<your_index>` with the name of the index where your relevant log data is stored.

2. `sourcetype=<your_sourcetype>`: Replace `<your_sourcetype>` with the name of the sourcetype that corresponds to the log data you want to search. This helps narrow down the search to relevant log sources.

3. `(command="/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db" OR cmdline="*unshadow*")`: This part of the query looks for two conditions:
   - It searches for events where the `command` field matches the exact execution command of the `unshadow` utility, which is `/usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db`.
   - It also searches for events where the `cmdline` field contains the word "unshadow." This covers cases where the utility might be invoked with different arguments or variations.

4. `NOT (user=root)`: This part of the query excludes events where the `user` field is set to "root" because, as per your description, `/etc/shadow` is only readable by the root user by default. If you expect legitimate root usage, you can adjust this part of the query to suit your specific environment.

Make sure to replace `<your_index>` and `<your_sourcetype>` with appropriate values for your Splunk setup. Additionally, adjust the query as needed to match the specifics of your environment and log sources.




To detect the activity associated with the four atomic tests you've provided, you can create a Splunk search query that looks for relevant commands and activities in your log data. Here's a search query that should help you detect these activities:

```spl
index=<your_index> sourcetype=<your_sourcetype>
| search (command="sudo cat /etc/shadow > * OR cat *") OR
  (command="cat /etc/passwd > * OR cat *") OR
  (command="echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > *") OR
  (command="function testcat(){ echo \"$(< $1)\"; } testcat /etc/passwd > * OR testcat /etc/shadow > *")
| eval test_type=case(
    match(command, "sudo cat /etc/shadow > *|cat *"), "Atomic Test #1 - Access /etc/shadow (Local)",
    match(command, "cat /etc/passwd > *|cat *"), "Atomic Test #2 - Access /etc/passwd (Local)",
    match(command, "echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > *"), "Atomic Test #3 - Access /etc/{shadow,passwd} with a standard bin that's not cat",
    match(command, "function testcat(){ echo \"$(< $1)\"; } testcat /etc/passwd > *|testcat /etc/shadow > *"), "Atomic Test #4 - Access /etc/{shadow,passwd} with shell builtins"
)
| table _time, user, host, command, test_type
```

Here's a breakdown of this Splunk search query:

1. Replace `<your_index>` and `<your_sourcetype>` with the appropriate values for your Splunk setup.

2. The `search` command filters events based on specific command patterns that match the atomic tests you've described. It looks for commands that are indicative of each test scenario.

3. The `eval` command assigns a `test_type` field to each event, indicating which atomic test it matches based on the command pattern.

4. Finally, the `table` command is used to display the relevant fields in the search results, including the timestamp (`_time`), user, host, command, and `test_type` to identify which atomic test was detected.

This query should help you detect the specified activities associated with the four atomic tests. Make sure to adjust the index and sourcetype to match your environment, and test it in your lab or test environment before implementing it in production.
